unit:
  created_date: "20240221"
  description: This unit is to test role "shell-execute".
  steps: 
    - role:
       name: shell-execute
       description: "[TEST] Single Command"
       input_env:
         COMMANDS: |
           echo "unit-role1-c1" 

    - role:
       name: shell-execute
       description: "[TEST] Multiple Commands without %%" 
       input_env:
         COMMANDS: |
           echo "Test1" > /tmp/a.out 
           cat /tmp/a.out

    - role:
       name: shell-execute
       description: "[TEST] Multiple Commands without %% using env" 
       input_env:
         COMMANDS: |
            export text=Test2
            echo $text > /tmp/a.out 
            cat /tmp/a.out
            echo ${text}
            if [[ $(cat /tmp/a.out) != "${text}" ]]
            then
              echo "environment variable failed to pass to next command" 1>&2
            fi
         STOP_WHEN_FAILED: "true"

    - role:
       name: shell-execute
       description: "[TEST] Multiple Commands with %%" 
       input_env:
         COMMANDS: |
           echo "Test3" > /tmp/a.out %% cat /tmp/a.out
         STOP_WHEN_FAILED: "true"

    - role:
       name: shell-execute
       description: "[TEST] Multiple Commands in multiple lines with %%"  
       input_env:
         COMMANDS: |
          echo "Test4" > /tmp/a.out %% 
          cat /tmp/a.out
         STOP_WHEN_FAILED: "true"  

    - role:
       name: shell-execute
       description: "[TEST] Multiple Commands with for statement"  
       input_env:
         COMMANDS: |      
            for i in {1..5}; do
                echo "$((i * 1000))"
                sleep 1 
            done
         STOP_WHEN_FAILED: "true"  


#  - role:
#        name: shell-execute
#        description: deploy modelmesh2 
#        input_env:
#          COMMANDS: |
#            echo "unit-role2-c1" %% echo3 "unit-role2-c2"
          # env %%
          # echo ${crt_content}  %%
          # export crt_content=${ROOT_CA_CERT_FILE_PATH}           %%
          # echo ${ROOT_CA_CERT_FILE_PATH} %%
          # echoe ${crt_content}  %%
          # kubectl patch dscinitialization default-dsci --type='json' -p='[{"op":"replace","path":"/spec/trustedCABundle/customCABundle","value":"'"$(awk '{printf "%s\\n", $0}' $crt_content)"'"}]' %%
          # oc delete pod --all -n kserve-demo %%

          # oc label namespace kserve-demo modelmesh-enabled=true --overwrite=true %%
          # oc apply -f https://raw.githubusercontent.com/Jooho/jhouse_openshift/main/Kserve/docs/Common/manifests/openvino-serving-runtime.yaml -n kserve-demo %%
          # oc patch servingruntime/ovms-1.x -p '{"spec":{"replicas":1}}' --type=merge -n kserve-demo %%
          # cat <<EOF| oc apply -f -
          # apiVersion: serving.kserve.io/v1beta1
          # kind: InferenceService
          # metadata:
          #   name: example-onnx-mnist
          #   namespace: kserve-demo
          #   annotations:
          #     serving.kserve.io/deploymentMode: ModelMesh
          # spec:
          #   predictor:
          #     model:
          #       modelFormat:
          #         name: onnx
          #       runtime: ovms-1.x
          #       storage:
          #         key: aws-connection-minio
          #         path: onnx/mnist.onnx
          # EOF
    #(example)
    #       oc new-project kserve-demo %% oc label ns/kserve-demo opendatahub.io/dashboard="true"
    #       kubectl patch DSCInitialization default-dsci --type=json -p='[{"op": "add", "path": "/spec/trustedCABundle", "value": {"managementState": "Managed", "customCABundle": ""}}]'  %%  hostname
